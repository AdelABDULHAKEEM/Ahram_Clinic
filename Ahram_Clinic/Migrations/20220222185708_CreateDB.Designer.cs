// <auto-generated />
using Ahram_Clinic.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ahram_Clinic.Migrations
{
    [DbContext(typeof(AhramClinicDBContext))]
    [Migration("20220222185708_CreateDB")]
    partial class CreateDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Ahram_Clinic.Models.Doctors", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Doc_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doc_Certificates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doc_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doc_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doc_Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Doc_Phone")
                        .HasColumnType("int");

                    b.Property<string>("Doc_UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Doc");
                });

            modelBuilder.Entity("Ahram_Clinic.Models.Nurses", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Nur_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nur_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nur_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nur_Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Nur_Phone")
                        .HasColumnType("int");

                    b.Property<string>("Nur_UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Nur");
                });

            modelBuilder.Entity("Ahram_Clinic.Models.Patients", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Patient_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Patient_Phone")
                        .HasColumnType("int");

                    b.Property<string>("Patient_UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Pat");
                });
#pragma warning restore 612, 618
        }
    }
}
